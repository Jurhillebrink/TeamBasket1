required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
runApp()
shiny::runApp()
>>>>>>> a6f6e1bc556ea7def0c70be6d672018952fde889
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinyWidgets",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
"RODBC",
"openssl",
"V8",
"DT",
"shinyWidgets",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
runApp()
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinyWidgets",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
"RODBC",
"openssl",
"V8",
"DT",
"shinyWidgets",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
shiny::runApp()
=======
normalize(moviedfNew$F2)
moviedfNew[,2:5] < lapply(moviedfNew[,2:5], normalize)
moviedfNew
install.packages('shiny')
library(shiny)
ui <- fluidPage("Hello world Jur")
server <- function(input, output) {}
shinyApp(ui = ui, server = server)
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/r scripts met uitleg code/Rshiy1.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/01 HelloWorld.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/02 TwoReactionsOneEvent.R')
runApp('C:/Users/2018/Desktop/R')
runApp('C:/Users/2018/Desktop/R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/05 ObserveEvent.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/06A Observe.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/09 LeafletReactive.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/09 LeafletReactive.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/09 LeafletReactive.R')
shiny::runApp('C:/Big data/basketbal1')
>>>>>>> Stashed changes
=======
x <- 3
x*xx
x*x
p <- list(5:7, 8)
P
p
sum_of_squares <- function(x) {
sum(x ^ 2)
}
lst <- list(c(10, 4, 7), c(3, 2, 5))
sapply(
, sum_of_squares)
sum_of_squares <- function(x) {
sum(x ^ 2)
}
lst <- list(c(10, 4, 7), c(3, 2, 5))
sapply(
1, sum_of_squares)
sum_of_squares <- function(x) {
sum(x ^ 2)
}
lst <- list(c(10, 4, 7), c(3, 2, 5))
sapply(
2, sum_of_squares)
sapply(2, sum_of_squares)
sapply(lst, sum_of_squares)
c(FALSE, TRUE) || c(FALSE, FALSE)
c(FALSE, TRUE) || c(TRUE, FALSE)
c(FALSE, TRUE) || c(FALSE, TRUE)
##needed for datamanipulation
install.packages("dplyr")
install.packages("DBI")
install.packages("rJava")
install.packages("RJBDC")
install.packages("sqldf")
shiny::runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
View(ui)
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
shiny::runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
shiny::runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
install.packages(c("BH", "DBI", "hms", "httpuv", "openssl", "pillar", "rlang", "selectr", "stringr", "tidyselect", "XML", "yaml"))
install.packages(c("BH", "DBI", "hms", "httpuv", "openssl", "pillar", "rlang", "selectr", "stringr", "tidyselect", "XML", "yaml"))
detach("package:RJDBC", unload=TRUE)
detach("package:DBI", unload=TRUE)
detach("package:rJava", unload=TRUE)
install.packages(c("BH", "DBI", "hms", "httpuv", "openssl", "pillar", "rlang", "selectr", "stringr", "tidyselect", "XML", "yaml"))
shiny::runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
runApp('HBO-ICT/Jaar 2/3. Big Data/Project/00 Code vorig semester')
>>>>>>> Stashed changes
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
