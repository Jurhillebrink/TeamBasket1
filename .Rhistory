drv <- JDBC("com.mysql.jdbc.Driver", "C:/Users/2018/Desktop/mysql-connector-java-5.1.45-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://localhost/final", "root", "root", useSSL=FALSE)
#dbWriteTable(conn,name="imdb", value=imdbTotal , append=FALSE, row.names=FALSE, overwrite=FALSE) #write imdb to new table total
imdbFromDB <- dbGetQuery(conn,"SELECT * FROM imdb") #select all rows from table and put it in DF
colnames(imdbFromDB)[1] <- "title" #preparing names for rbind
colnames(imdbFromDB)[2] <- "rating" #preparing names for rbind
#which(total == "Coco", arr.ind = TRUE) #search for string in DF
filmvandaagSameRows <- filmvandaag[filmvandaag$title %in% imdbFromDB$title,] #same movies as imdbfromdb
filmvandaagSameRows
imdbSameRows <- imdbFromDB[imdbFromDB$title %in% filmvandaag$title,] #same movies as filmvandaagSameRow
imdbSameRows
total <- rbind(filmvandaagSameRows, imdbSameRows) #bind the dataframes of filmvandaag and imdb
total[, 2] <- as.numeric(as.character( total[, 2] )) #factor to character
library(dplyr)
newDf <- group_by(total, title)
newDf <- summarize(newDf, sumRating = diff(rating))
newDf
ggplot(newDf, aes(x=title, y=sumRating)) + geom_bar(stat="identity")
# install.packages("rJava")
# install.packages("RJDBC")
# install.packages("DBI")
install.packages("rvest")
url <- c("https://www.filmvandaag.nl/top100/2017")
title <- web_page %>% html_nodes(".movielist-titel") #get all titles
title <- gsub(".*\">","",title) #remove everything before een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title <- gsub('</a>', '', title) #removes the class movielist-right
title <- gsub('.{7}$', '', title) #removes 2016 en 2017
web_page <- c("https://www.filmvandaag.nl/top100/2017")
title <- web_page %>% html_nodes(".movielist-titel") #get all title
library(rvest)
web_page <- c("https://www.filmvandaag.nl/top100/2017")
title <- web_page %>% html_nodes(".movielist-titel") #get all titles
title <- gsub(".*\">","",title) #remove everything before een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title <- gsub('</a>', '', title) #removes the class movielist-right
title <- gsub('.{7}$', '', title) #removes 2016 en 2017
library(rvest)
web_page <- c("https://www.filmvandaag.nl/top100/2017")
title <- web_page %>% html_nodes(".movielist-titel") #get all titles
title <- gsub(".*\">","",title) #remove everything before een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title <- gsub('</a>', '', title) #removes the class movielist-right
title <- gsub('.{7}$', '', title) #removes 2016 en 2017
title
library(rvest)
web_page <- c("https://www.filmvandaag.nl/top100/2017")
title <- web_page %>% html_nodes(".movielist-titel") #get all titles
title <- gsub(".*\">","",title) #remove everything before een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title <- gsub('</a>', '', title) #removes the class movielist-right
#title <- gsub('.{7}$', '', title) #removes 2016 en 2017
title
shiny::runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment')
web_page <- c("https://www.filmvandaag.nl/top100/2017")
web_page = read_html(url)
title <- web_page %>% html_nodes(".movielist-titel") #get all titles
title <- gsub(".*\">","",title) #remove everything before een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title <- gsub('</a>', '', title) #removes the class movielist-right
#title <- gsub('.{7}$', '', title) #removes 2016 en 2017
title
web_page <- c("https://www.filmvandaag.nl/top100/2017")
web_page = read_html(url)
title <- web_page %>% html_nodes(".movielist-titel") #get all titles
title <- gsub(".*\">","",title) #remove everything before een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title <- gsub('</a>', '', title) #removes the class movielist-right
title <- gsub('.{7}$', '', title) #removes 2016 en 2017
title
#connection DB
library(DBI)
library(rJava)
library(RJDBC)
library(ggplot2)
library(dplyr)
library(sqldf)
library(rvest)
web_page <- c("https://www.filmvandaag.nl/top100/2017")
web_page = read_html(url)
title <- web_page %>% html_nodes(".movielist-titel") #get all titles
title <- gsub(".*\">","",title) #remove everything before een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title <- gsub('</a>', '', title) #removes the class movielist-right
title <- gsub('.{7}$', '', title) #removes 2016 en 2017
title
rating <- web_page %>% html_nodes(".movielist-right") #get all ratings
rating <- gsub('<div class=\"movielist-right\">', '', rating) #removes the class movielist-right
rating <- gsub(" <img.*","",rating)
filmvandaag <- data.frame(title, rating) #creating new dataframe
filmvandaag
#Get top 100 of imdb
url_imdb <- c("http://www.imdb.com/search/title?year=2017,2017&title_type=feature&sort=moviemeter&view=simple") #top 100 most popular 2017 IMDB
web_page_imdb <- read_html(url_imdb) #read the html page
title_imdb <- web_page_imdb %>% html_nodes(".lister-item-header") #get title
title_imdb <- gsub(".*adv_li_tt","",title_imdb)
title_imdb <- gsub("</a>.*","",title_imdb)#remove everything before een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title_imdb <- gsub(".*>","",title_imdb)
rating_imdb <- web_page_imdb %>% html_nodes(".col-imdb-rating") #get rating class
rating_imdb <- gsub(".*votes","", rating_imdb) #remove first bullshit
rating_imdb <- gsub("[^.0-9]", "", rating_imdb) #keep only the numbers
df1 <- data.frame(title_imdb, rating_imdb) #creating df of first 50 movies
#second page of top 100
url_imdb2 <- c("http://www.imdb.com/search/title?year=2017,2017&title_type=feature&sort=moviemeter&view=simple&page=2")
web_page2_imdb <- read_html(url_imdb2)
title_imdb2 <- web_page2_imdb %>% html_nodes(".lister-item-header") #get title
title_imdb2 <- gsub(".*adv_li_tt","",title_imdb2)
title_imdb2 <- gsub("</a>.*","",title_imdb2)#remove everything after een bepaalde character. Dit verschilde namelijk telkens daardoor kon ik geen lengte doen
title_imdb2 <- gsub(".*>","",title_imdb2)
rating_imdb2 <- web_page2_imdb %>% html_nodes(".col-imdb-rating") #get rating class
rating_imdb2 <- gsub(".*votes","", rating_imdb2) #remove first bullshit
rating_imdb2 <- gsub("[^.0-9]", "", rating_imdb2) #keep only the numbers
df2 <- data.frame(title_imdb2, rating_imdb2) #creating df of last 50 movie
colnames(df2)[1] <- "title_imdb" #preparing names for rbind
colnames(df2)[2] <- "rating_imdb" #preparing names for rbind
imdbTotal <- rbind(df1, df2) #combine the two df's
drv <- JDBC("com.mysql.jdbc.Driver", "C:/Users/2018/Desktop/mysql-connector-java-5.1.45-bin.jar")
conn <- dbConnect(drv, "jdbc:mysql://localhost/final", "root", "root", useSSL=FALSE)
#dbWriteTable(conn,name="imdb", value=imdbTotal , append=FALSE, row.names=FALSE, overwrite=FALSE) #write imdb to new table total
imdbFromDB <- dbGetQuery(conn,"SELECT * FROM imdb") #select all rows from table and put it in DF
colnames(imdbFromDB)[1] <- "title" #preparing names for rbind
colnames(imdbFromDB)[2] <- "rating" #preparing names for rbind
#which(total == "Coco", arr.ind = TRUE) #search for string in DF
filmvandaagSameRows <- filmvandaag[filmvandaag$title %in% imdbFromDB$title,] #same movies as imdbfromdb
filmvandaagSameRows
imdbSameRows <- imdbFromDB[imdbFromDB$title %in% filmvandaag$title,] #same movies as filmvandaagSameRow
imdbSameRows
total <- rbind(filmvandaagSameRows, imdbSameRows) #bind the dataframes of filmvandaag and imdb
total[, 2] <- as.numeric(as.character( total[, 2] )) #factor to character
library(dplyr)
newDf <- group_by(total, title)
newDf <- summarize(newDf, sumRating = diff(rating))
newDf
ggplot(newDf, aes(x=title, y=sumRating)) + geom_bar(stat="identity")
View(web_page_imdb)
shiny::runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment')
runApp('C:/Users/2018/Desktop/R')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Desktop/R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/06B Reactive.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/06B Reactive.R')
runApp('C:/Users/2018/Downloads/10-How-start-Shiny-Part-3/08-How-to-start-with-Shiny-Part-1/04 IsolateEvent.R')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
shiny::runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
View(df1)
View(df2)
shiny::runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/Users/2018/Google Drive/HVA/Jaar 3/Themasemester Big Data/Data processing/Final assignment/Met Shiny')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
#   "httr",
#   "jsonlite"
# )
#
#
# packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
#
# if (length(packages_to_install) > 0) {
#   install.packages(packages_to_install, repos = "https://cran.rstudio.com")
# }
.libPaths()
shiny::runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
library("ggplot2", "ggthemes")
movies <- read.csv('https://raw.githubusercontent.com/idc9/stor390/master/data/movies.csv')
head(movies)
colnames(movies)
ggplot(data = movies) +
geom_point(mapping = aes(x=imdb_num_votes, y=imdb_rating, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggsave("assignment2-ggplot-movies.png", width = 8, height = 8)
ggsave("assignment2-ggplot-movies.png", width = 8, height = 8)
install.packages(ggthemes)
install.packages("ggthemes")
library("ggplot2", "ggthemes")
movies <- read.csv('https://raw.githubusercontent.com/idc9/stor390/master/data/movies.csv')
head(movies)
colnames(movies)
ggplot(data = movies) +
geom_point(mapping = aes(x=imdb_num_votes, y=imdb_rating, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggsave("assignment2-ggplot-movies.png", width = 8, height = 8)
install.packages("ggthemes", "ggplot2")
library("ggplot2", "ggthemes")
movies <- read.csv('https://raw.githubusercontent.com/idc9/stor390/master/data/movies.csv')
head(movies)
colnames(movies)
ggplot(data = movies) +
geom_point(mapping = aes(x=imdb_num_votes, y=imdb_rating, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggsave("assignment2-ggplot-movies.png", width = 8, height = 8)
ggplot(data = movies) +
geom_point(mapping = aes(x=imdb_num_votes, y=imdb_rating, shape=actor1, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
install.packages("ggthemes", "ggplot2")
library("ggplot2", "ggthemes")
movies <- read.csv('https://raw.githubusercontent.com/idc9/stor390/master/data/movies.csv')
head(movies)
colnames(movies)
ggplot(data = movies) +
geom_point(mapping = aes(x=dvd_rel_year, y=imdb_rating, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggsave("assignment2-ggplot-movies.png", width = 8, height = 8)
ggplot(data = movies) +
geom_point(mapping = aes(x=dvd_rel_year, y=thtr_rel_year, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggplot(data = movies) +
geom_point(mapping = aes(x=dvd_rel_year, y=imdb_rating, shape=genre, color=genre))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggplot(data = movies) +
geom_point(mapping = aes(x=dvd_rel_year, y=imdb_rating, color=genre))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggsave("assignment2-ggplot-movies.png", width = 10, height = 10)
8
library("ggplot2", "ggthemes")
movies <- read.csv('https://raw.githubusercontent.com/idc9/stor390/master/data/movies.csv')
head(movies)
colnames(movies)
ggplot(data = movies) +
geom_point(mapping = aes(x=dvd_rel_year, y=imdb_rating, color=genre))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggsave("assignment2-ggplot-movies.png", width = 10, height = 10)
ggplot(data = movies) +
geom_point(mapping = aes(x=title, y=imdb_rating, color=genre))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
install.packages("ggthemes", "ggplot2")
library("ggplot2", "ggthemes")
movies <- read.csv('https://raw.githubusercontent.com/idc9/stor390/master/data/movies.csv')
head(movies)
colnames(movies)
ggplot(data = movies) +
geom_point(mapping = aes(x=title, y=imdb_rating, color=genre))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggsave("assignment2-ggplot-movies.png", width = 10, height = 10)
ggplot(data = movies) +
geom_point(mapping = aes(x=year, y=runtime, color=genre))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggplot(data = movies) +
geom_point(mapping = aes(x=thtr_rel_day, y=imdb_rating, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggplot(data = movies) +
geom_point(mapping = aes(x=thtr_rel_day, y=studio, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
movies <- read.csv('https://raw.githubusercontent.com/idc9/stor390/master/data/movies.csv')
head(movies)
colnames(movies)
ggplot(data = movies) +
geom_point(mapping = aes(x=thtr_rel_day, y=studio, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggsave("assignment2-ggplot-movies.png", width = 8, height = 8)
ggplot(data = movies) +
geom_point(mapping = aes(x=thtr_rel_day, y=imdb_rating, shape=studio, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggplot(data = movies) +
geom_point(mapping = aes(x=thtr_rel_day, y=critics_score, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
ggplot(data = movies) +
geom_point(mapping = aes(x=dvd_rel_year, y=critics_score, shape=genre, color=best_dir_win))+
scale_x_continuous()+
scale_y_continuous()+
theme_light() +
theme(legend.position = "right", legend.key = element_blank(),
axis.text = element_text(size=10),
axis.title = element_text(size=12)) +
labs(x = "Label x-axis", y = "Label y-axis", title="Title of your visualization", color="Label colors", shape = "Label shapes")
shiny::runApp('C:/TeamBasket/TeamBasket1')
required_packages = c(
"shiny",
"readr",
"tidyr",
"stringr",
"dplyr",
"ggplot2",
"grid",
"jpeg",
"RCurl",
"DBI",
"png",
"data.table",
"mongolite",
"shinydashboard",
"shinyWidgets",
"shinythemes",
"plotly",
"markdown",
"shinyjs",
"RJDBC",
"RODBC",
"openssl",
"V8",
"DT",
"shinyWidgets",
"mailR",
#optional
"hexbin",
"httr",
"jsonlite"
)
packages_to_install = required_packages[!(required_packages %in% installed.packages()[, 1])]
if (length(packages_to_install) > 0) {
install.packages(packages_to_install, repos = "https://cran.rstudio.com")
}
shiny::runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
shiny::runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
runApp('C:/TeamBasket/TeamBasket1')
<<<<<<< HEAD
shiny::runApp('C:/TeamBasket/TeamBasket1')
=======
runApp('C:/TeamBasket/TeamBasket1')
>>>>>>> Development
